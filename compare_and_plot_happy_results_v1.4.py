
import pandas as pd
import easygui
import matplotlib.pyplot as plt


"""
This script is used to compare the results of the Hap.py tool on different VCF files.
It asks the user to select the files to compare, and then plots the results.
Files are the .stats.csv files generated by Hap.py.

"""


def generate_df(files_list):
    def parse_stats_csv_to_pandas(file):
        df = pd.read_csv(file, sep=",", header=0)
        # add a column for the file name, without the path, and without ".stats.csv"
        df["file"] = file.split("/")[-1]
        # set the file name as the index
        df = df.set_index("file")
        return df
    def parse_stats_xl_to_pandas(file):
        df = pd.read_excel(file, header=0)
        # add a column for the file name, without the path, and without ".stats.csv"
        df["file"] = file.split("/")[-1]
        # set the file name as the index
        df = df.set_index("file")
        return df
    # merge dataframes
    def add_f1_score(df):
        df["f1_score"] = 2 * df["recall"] * df["precision"] / (df["recall"] + df["precision"])
        return df
    df = pd.DataFrame()
    for file in files_list:
        if file.split(".")[-1] == "csv":
            df = df.append(parse_stats_csv_to_pandas(file))
        elif file.split(".")[-1] == "xlsx":
            df = df.append(parse_stats_xl_to_pandas(file))
        else:
            raise ValueError("Extension of the files must be either .csv or .xlsx")
    df = add_f1_score(df)
    return df


def rename_conditions_and_get_a_title(df):
    # this script displays a multenterbox easygui interface that displays the list of files, which the user can rename
    # also asks for the title of the figure
    # returns the df with renamed files, and the title of the figure
    def file_name_auto_formatting(file_name):
        to_remove=[".stats.csv", ".stats.xlsx", "NA12878.", "NA12878_"]
        for element in to_remove:
            file_name = file_name.replace(element, "")
        return file_name
    # create a dict with the default names of the files
    default_figure_title = "NA_12878 comparison"
    renaming_dict={"figure_title": default_figure_title}
    for index in df.index.unique():
        renaming_dict[index] = file_name_auto_formatting(index)
    # create a multenterbox easygui interface
    msg = "Enter a title for the figure and rename the files if necessary (the shorter the better)"
    title = "Rename files"
    field_names = list(renaming_dict.keys())
    field_values = list(renaming_dict.values())
    field_values = easygui.multenterbox(msg, title, field_names, field_values)
    # update the renaming_dict with the new names of the files and the new title of the figure
    for index, value in enumerate(field_values):
        if index == 0:
            renaming_dict["figure_title"] = value
        else:
            renaming_dict[list(renaming_dict.keys())[index]] = value
    # rename the files in the df
    df = df.rename(index=renaming_dict)
    # return the df and the title of the figure
    return df, renaming_dict["figure_title"]
    


def plot_counts(df, figure_title):
    # back colors are slightly lighter than the front colors
    color_dict = {"tp": "#2adf59", "fp": "#f56e85", "fn": "#2a98df", "tp_back": "#a7f5c2", "fp_back": "#f5b7c2", "fn_back": "#a7d5f5"}
    # création de la figure : deux sous graphiques, un pour les SNVs et un pour les indels
    # la partie positive du barplot correpond aux vrais variants (tp et fn), la partie négative aux faux variants (fp)
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(13, 7))
    fig.suptitle(figure_title, fontsize=16)
    # création des subplots pour les SNVs et les indels
    
    for i, snv_or_indel in enumerate(["SNVs", "indels"]):
        # get the dataframe with only snvs or indels
        df_snvs = df[df["type"] == snv_or_indel]
        # plot the false positives
        # false positive values are converted to negative values
        ax = [ax1, ax2][i]
        ax.bar(df_snvs.index, -df_snvs["fp"], color=color_dict["fp"])
        # plot the true positives, starting from 0
        ax.bar(df_snvs.index, df_snvs["tp"], bottom=0, color=color_dict["tp"])
        # plot the false negatives, starting from the top of the true positives
        ax.bar(df_snvs.index, df_snvs["fn"], bottom=df_snvs["tp"], color=color_dict["fn"])
        # compute the position of the text labels
        # tp labels are at half of the tp value
        # fn labels are at tp value + half of the fn value
        # fp labels are at 0 - half of the fp value

        for index, row in df_snvs.iterrows():
            tp = row["tp"]
            fn = row["fn"]
            fp = row["fp"]
            # add the text labels
            ax.text(index, tp/2, tp, ha="center", va="center", bbox=dict(boxstyle="round", facecolor=color_dict["tp_back"], edgecolor="black", linewidth=1))
            ax.text(index, tp + fn/2, fn, ha="center", va="center", bbox=dict(boxstyle="round", facecolor=color_dict["fn_back"], edgecolor="black", linewidth=1))
            ax.text(index, -fp/2, fp, ha="center", va="center", bbox=dict(boxstyle="round", facecolor=color_dict["fp_back"], edgecolor="black", linewidth=1))


        # add a horizontal line at 0
        ax.axhline(y=0, color="black", linestyle="--")
        # add a title
        ax.set_title(f"{snv_or_indel} counts")
        # add a ylabel
        ax.set_ylabel("counts")
    # add a legend
    legend_elements = [plt.Rectangle((0, 0), 1, 1, color=color_dict["fp"], label="false positives"),
                            plt.Rectangle((0, 0), 1, 1, color=color_dict["tp"], label="true positives"),
                            plt.Rectangle((0, 0), 1, 1, color=color_dict["fn"], label="false negatives")]
    fig.subplots_adjust(bottom=0.3)
    fig.legend(handles=legend_elements, loc='lower center', ncol=3)
    # let a margin below the figure for the legend
    fig.tight_layout(rect=[0, 0.06, 1, 1])
    filename = "counts.png"
    # save the figure
    print(f"Saving counts plot : counts.png")
    plt.savefig(filename)


def plot_recall_precision_or_f1_score(df, figure_title, recall_or_precision, color, color_back):
    # verify that recall_or_precision is either "recall" or "precision"
    if recall_or_precision not in ["recall", "precision", "f1_score"]:
        raise ValueError("recall_or_precision must be either 'recall', 'precision' or 'f1_score'")
    
    # one plot for snvs, one for indels, and one for both
    fig, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3, figsize=(20, 8))
    fig.suptitle(figure_title, fontsize=16)

    for i, snv_or_indel in enumerate(["SNVs", "indels", "records"]):
        # get the dataframe with only snvs or indels
        df_snvs = df[df["type"] == snv_or_indel]
        # plot the recall or precision
        ax = [ax1, ax2, ax3][i]
        ax.bar(df_snvs.index, df_snvs[recall_or_precision], color=color)
        title = (f"{snv_or_indel} {recall_or_precision}").replace("records", "SNVs and indels")
        ax.set_title(title)
        ax.set_ylabel(recall_or_precision)
        # for each plot, add counts at half the height of the bars, with three decimals, use the background color
        for p in ax.patches:
            ax.annotate(str(round(p.get_height(), 4)), (p.get_x() + p.get_width() / 2., p.get_height()/2), ha="center", va="center", xytext=(0, 10), textcoords='offset points', bbox=dict(boxstyle="round", facecolor=color_back, edgecolor="black", linewidth=1))
        # for each plot, add a horizontal line at 1
        ax.axhline(y=1, color="black", linestyle="--")
    
    # save the figure
    print(f"Saving {recall_or_precision} plot : {recall_or_precision}.png")
    plt.savefig(f"{recall_or_precision}.png")



files_list = easygui.fileopenbox(msg="Select the files to compare", title="Select files", multiple=True)
# files_list=["/home/adm-loc/Documents/Programmes/python/data_happy/results_onco/onco_DV.stats.csv", "/home/adm-loc/Documents/Programmes/python/data_happy/results_onco/onco_HC.stats.csv"]
df = generate_df(files_list)
df, experiment_title=rename_conditions_and_get_a_title(df)

plot_counts(df, experiment_title)
plot_recall_precision_or_f1_score(df, experiment_title, "recall", "orange", "#f5d7a7")
plot_recall_precision_or_f1_score(df, experiment_title, "precision", "#a7a6e7", "#a7d5f5")
plot_recall_precision_or_f1_score(df, experiment_title, "f1_score", "#2adf59", "#a7f5c2")



